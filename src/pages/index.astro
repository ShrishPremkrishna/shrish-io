---
import Base from '../layouts/Base.astro';
import Nav from '../components/Nav.astro';
import Monogram from '../components/Monogram.astro';
---
<Base title="Shrish Premkrishna — Full Stack AI Engineer" description="Portfolio of Shrish Premkrishna — projects, experience, awards, and press.">
  <Nav />
  <main>
    <section class="relative geometric-pattern overflow-hidden" data-reactive-bg>
      <div class="shapes" aria-hidden="true"></div>
      <div class="max-w-6xl mx-auto px-4 py-16 md:py-24 grid gap-10 items-center relative z-10">
        <div>
          <h1 class="font-display text-5xl md:text-6xl leading-tight text-forest">Shrish Premkrishna</h1>
          <p class="mt-3 text-lg text-forest/80">Full Stack AI Engineer · Co‑founder, building Beatify</p>
          <div class="mt-6 flex gap-3">
            <a href="/projects/beatify" class="px-4 py-2 rounded-md bg-palegold text-ink shadow-soft hover:shadow-glow">View Beatify</a>
            <a href="/projects" class="px-4 py-2 rounded-md border border-border text-forest hover:bg-sage/40">All projects</a>
          </div>
          <div class="mt-6 text-forest/70 text-sm">Now: The AI powered social network directly connecting artists and producers.</div>
        </div>
      </div>
    </section>

    <section id="about" class="border-t border-border geometric-pattern-about relative overflow-hidden" data-reactive-bg>
      <div class="shapes" aria-hidden="true"></div>
      <div class="max-w-6xl mx-auto px-4 py-12 relative z-10">
        <h2 class="font-display text-3xl text-forest">About</h2>
        <h3 class="mt-3 font-display text-xl text-forest">CS @ Stanford w/ AI Track</h3>
        <ul class="mt-3 list-disc pl-5 text-forest/80 space-y-1 max-w-3xl">
          <li>spikes in artificial intelligence, robotics, product design, environmental engineering</li>
          <li>love collaborating with other people</li>
          <li>love working on real world problems</li>
          <li>love creating new things</li>
        </ul>
      </div>
    </section>

    <section id="experience" class="border-t border-border geometric-pattern-experience relative overflow-hidden" data-reactive-bg>
      <div class="shapes" aria-hidden="true"></div>
      <div class="max-w-6xl mx-auto px-4 py-12 grid gap-6 relative z-10">
        <h2 class="font-display text-3xl text-forest">Experience</h2>
        <div class="p-5 rounded-lg bg-sage/40 border border-border">
          <h3 class="font-display text-2xl text-forest">Co‑founder — Beatify</h3>
          <p class="mt-2 text-forest/80">The AI powered social network directly connecting artists and producers. Connect closer with your community, finally get your beats some traction, and focus on the craft.</p>
        </div>
        <div class="p-5 rounded-lg bg-palegold/30 border border-border">
          <h3 class="font-display text-2xl text-forest">Stanford Researcher — PINCS Program</h3>
          <ul class="mt-2 list-disc pl-5 text-forest/80 space-y-1">
            <li>Collaborated with Prof. Chris Gregg + Stanford team to design interactive K–12 psychology lessons with CS integration.</li>
            <li>Built 2 full-stack learning tools (React, TypeScript, Node.js, Firebase) for classroom use.</li>
          </ul>
        </div>
        <div class="p-5 rounded-lg bg-palegold/30 border border-border">
          <h3 class="font-display text-2xl text-forest">EstateParrot — AI Infrastructure Intern</h3>
          <ul class="mt-2 list-disc pl-5 text-forest/80 space-y-1">
            <li>Built internal AI agent dashboard (React, Python, TypeScript), tripling debugging/testing speed for 10+ devs.</li>
            <li>Integrated tools for real-time log parsing and agent analysis; automated listing workflows with AI + GCP.</li>
            <li>Created 3 tools for daily agent interactions, boosting marketability and user utility.</li>
          </ul>
        </div>
        <div class="p-5 rounded-lg bg-palegold/30 border border-border">
          <h3 class="font-display text-2xl text-forest">TVYCAP — Founder, Executive Lead</h3>
          <ul class="mt-2 list-disc pl-5 text-forest/80 space-y-1">
            <li>Co‑founded a 35‑member climate nonprofit; reached 300+ students across 15 schools.</li>
            <li>Led 7 major initiatives including the wLivermore Heatmapping Initiative and passing LVJUSD's Climate Literacy Resolution.</li>
          </ul>
        </div>
      </div>
    </section>

    <script>
      const sections = document.querySelectorAll('[data-reactive-bg]');
      const damp = 0.12; // Easing factor for background parallax
      const stiffness = 0.12; // Spring stiffness for shapes
      const damping = 0.88; // Slightly reduced damping for more fluidity

      sections.forEach(section => {
        let targetX = 0;
        let targetY = 0;
        let currentX = 0;
        let currentY = 0;
        let animationFrameId;

        const shapes = [];
        const colors = ['gold', 'green', 'bronze']; // Use CSS classes instead of hex colors
        
        // Customize shapes based on panel type
        let kinds;
        if (section.classList.contains('geometric-pattern-experience')) {
          kinds = ['hexagon', 'hexagon', 'hexagon']; // Experience panel: mostly hexagons
        } else if (section.classList.contains('geometric-pattern-about')) {
          kinds = ['hexagon', 'triangle', 'hexagon']; // About panel: hexagons and triangles
        } else {
          kinds = ['orb', 'diamond', 'orb']; // Hero panel: orbs and diamonds
        }

        function spawnShapes(container, count) {
          for (let i = 0; i < count; i++) {
            const shape = document.createElement('div');
            const size = Math.random() * 20 + 10; // 10-30px
            shape.className = `shape ${kinds[Math.floor(Math.random() * kinds.length)]} ${colors[Math.floor(Math.random() * colors.length)]}`;
            shape.style.width = `${size}px`;
            shape.style.height = `${size}px`;
            shape.style.left = `${Math.random() * 100}%`;
            shape.style.top = `${Math.random() * 100}%`;
            shape.vx = 0; // velocity x
            shape.vy = 0; // velocity y
            shape.px = parseFloat(shape.style.left); // current position x
            shape.py = parseFloat(shape.style.top); // current position y
            shape.originalPx = shape.px; // store original position
            shape.originalPy = shape.py;
            container.appendChild(shape);
            shapes.push(shape);
          }
        }

        const shapesOverlay = document.createElement('div');
        shapesOverlay.className = 'absolute inset-0 z-20 pointer-events-none';
        section.appendChild(shapesOverlay);
        spawnShapes(shapesOverlay, 35); // Increased to 35 shapes per section

        section.addEventListener('pointermove', (e) => {
          const rect = section.getBoundingClientRect();
          const x = e.clientX - rect.left;
          const y = e.clientY - rect.top;

          targetX = (x / rect.width - 0.5) * 2; // -1 to 1
          targetY = (y / rect.height - 0.5) * 2; // -1 to 1

          section.style.setProperty('--ox', `${x}px`);
          section.style.setProperty('--oy', `${y}px`);

          // Store current mouse position for shape animation
          section.currentMouseX = e.clientX;
          section.currentMouseY = e.clientY;

          if (!animationFrameId) {
            animationFrameId = requestAnimationFrame(animate);
          }
        });

        section.addEventListener('pointerleave', () => {
          targetX = 0;
          targetY = 0;
          // Reset all shape velocities when leaving to prevent circular motion
          shapes.forEach(shape => {
            shape.vx *= 0.3; // More aggressive velocity reduction
            shape.vy *= 0.3;
          });
        });

        function animate() {
          currentX += (targetX - currentX) * damp;
          currentY += (targetY - currentY) * damp;

          section.style.setProperty('--mx', `${currentX.toFixed(2)}`);
          section.style.setProperty('--my', `${currentY.toFixed(2)}`);

          shapes.forEach(shape => {
            const shapeRect = shape.getBoundingClientRect();
            const sectionRect = section.getBoundingClientRect();
            const shapeCenterX = shapeRect.left + shapeRect.width / 2 - sectionRect.left;
            const shapeCenterY = shapeRect.top + shapeRect.height / 2 - sectionRect.top;

            const dx = section.currentMouseX - sectionRect.left - shapeCenterX;
            const dy = section.currentMouseY - sectionRect.top - shapeCenterY;
            const dist = Math.sqrt(dx * dx + dy * dy);

            const strength = 120; // Increased influence radius for more responsive feel
            if (dist < strength) {
              const force = (1 - dist / strength) * 0.9; // Increased force multiplier for more satisfying movement
              const angle = Math.atan2(dy, dx);
              const fx = Math.cos(angle) * force * 4; // Increased movement amplitude
              const fy = Math.sin(angle) * force * 4;

              shape.vx += fx;
              shape.vy += fy;
            }

            // Apply spring physics with better damping
            shape.vx *= damping;
            shape.vy *= damping;
            
            // Add a gentler return-to-origin force that only activates when far from origin
            const distanceFromOrigin = Math.sqrt(
              Math.pow(shape.px - shape.originalPx, 2) + 
              Math.pow(shape.py - shape.originalPy, 2)
            );
            
            // Only apply return force if shape is significantly displaced
            if (distanceFromOrigin > 5) {
              const returnForce = 0.04; // Gentler return force
              const adaptiveReturnForce = returnForce * (distanceFromOrigin * 0.005);
              shape.vx += (shape.originalPx - shape.px) * adaptiveReturnForce;
              shape.vy += (shape.originalPy - shape.py) * adaptiveReturnForce;
            }
            
            shape.px += shape.vx;
            shape.py += shape.vy;

            shape.style.transform = `translate3d(${shape.px - shape.originalPx}px, ${shape.py - shape.originalPy}px, 0) scale(${1 + Math.abs(shape.vx) * 0.04 + Math.abs(shape.vy) * 0.04})`; // Slightly increased scale effect
          });

          if (Math.abs(targetX - currentX) > 0.001 || Math.abs(targetY - currentY) > 0.001 || shapes.some(s => Math.abs(s.vx) > 0.001 || Math.abs(s.vy) > 0.001)) {
            animationFrameId = requestAnimationFrame(animate);
          } else {
            animationFrameId = null;
          }
        }
      });
    </script>
  </main>
</Base>


